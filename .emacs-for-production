;;; emacs startup file -*- lisp -*-
;;; $Header: init.el,v 1.2 2005/12/24 01:03:20 jos Exp $
;;;
;;; $Log: init.el,v $
;;;  Revision 1.2  2005/12/24  01:03:20  jos
;;;  Cleaned up a bit, removed all of the "Dont Execute" stuff, so you'll need to check
;;;  out the 1.1 version to get at what was there.
;;;
;;;  Revision 1.1  2005/12/21  20:30:12  jos
;;;  Initial revision
;;;
;;;  Revision 1.4  96/09/04  19:00:19  19:00:19  jos (John O. Schneider)
;;;  Fixed problem with info paths, /usr/local/info must be first
;;;  or some info topics cannot be found. jos.
;;;  
;;;  Revision 1.3  96/08/29  13:48:16  13:48:16  jos (John O. Schneider)
;;;  added $Header and $Log
;;;  
;;;
;;;  Emacs  initialization file for JOS
;;; 
(defmacro GNUEmacs (&rest x)
  (list 'if (string-match "GNU Emacs" (version)) (cons 'progn x)))
(defmacro XEmacs (&rest x)
  (list 'if (string-match "XEmacs" (version)) (cons 'progn x)))
(defmacro NextStep (&rest x)
  (list 'if (string-match "NS apple" (version)) (cons 'progn x)))
(defmacro Emacs-version (x)
  (list 'string-match x (version)))
(defmacro dont-execute (&rest x)
  (list 'if nil (cons 'progn x)))

;; Colors!
;;
(setq jos-bg-color             "black")
(setq jos-fg-color             "grey80")
(setq jos-mode-bg-color        "grey50")
(setq jos-mode-fg-color        "yellow")
(setq jos-highlight-bg-color   "grey")
(setq jos-highlight-fg-color   "black")
(setq jos-cursor-color         "yellow")
(setq jos-mouse-color          "yellow")


;; set load-path
;; 
(cond
  (t (setq path-root (getenv "HOME"))))

(set 'load-path
     (append load-path
	          (list
		         "C:/Users/jos/Desktop/Programming/vm-7.19/lisp/vm"
			       "c:/users/jos/Desktop/Programming/scala/scala-2.7.5.final/misc/scala-tool-support/emacs"
			             (concat path-root "/Documents/workspace/tools/emacs")
				           (concat path-root "/tools/lisp")
					         (concat path-root "/tools/lisp/js-mode")
						       (concat path-root "/tools/lisp/mmm-mode")
						             (concat path-root "/tools/lisp/psgml-1.3.1"))))

;; for old style NT Emacs, which did not have an installer, we help out
(cond
 ((Emacs-version "GNU Emacs 21.3")
  (set 'load-path 
       (append load-path
	              (list
		       "c:/progra~1/gnuwin32/emacs-21.3/lisp"
		       "c:/progra~1/gnuwin32/emacs-21.3/site-lisp"))))
  ((Emacs-version "XEmacs 21.5")
   (set 'load-path 
	(append load-path
		(list
		  "c:/Program Files/XEmacs/xemacs-21.5/lisp")))))

;; Cocoa / NS version of emacs 
(NextStep
 (setq mac-option-modifier 'super)
 (setq mac-command-modifier 'meta))

;; if in any kind of window system
;;
(if window-system
    (progn
      ;; (list-colors-display) interactive function to list colors supported on display
      ;; Dark background - requires an additional load of "faces" to get my corrected
      ;; function loaded (some defect in properties cache for frames...
      (load-library "faces")
      (cond
       ((eq system-type 'windows-nt) ;; nt emacs
        (set-background-color "black"))
       ((eq system-type 'darwin) 
        (set-background-color "black")))

      (GNUEmacs
       ;; setup alist for future frames
       (setq default-frame-alist
             (list
	            (cons 'left                 350)
		          (cons 'top                  0)
			        (cons 'width                80)
				      (cons 'height               45)
              (cons 'minibuffer           t)
              (cons 'menu-bar-lines       0)
              (cons 'border-color         "black")
              (cons 'cursor-color         jos-cursor-color)
              (cons 'mouse-color          jos-mouse-color)
              (cons 'background-mode      'dark)
              (cons 'background-color     jos-bg-color)
              (cons 'foreground-color     jos-fg-color)
              (cons 'vertical-scroll-bars nil)
              (cons 'scroll-bar-width nil)))

       (set-face-foreground 'mode-line "black")
       (set-face-background 'mode-line "grey65")

       (set-face-foreground 'mode-line-inactive "grey80")
       (set-face-background 'mode-line-inactive "grey30")

       ;; States of various controls - see josfuns.el for interactive functions 
       ;; to toggle these
       (scroll-bar-mode -1)             ; turn off scroll bars
       (menu-bar-mode -1)               ; turn off menu bars
       (tool-bar-mode -1)               ; turn off tool bars
       )                                ;; GNUEmacs

      (set-foreground-color                     jos-fg-color)
      (set-face-foreground 'highlight           jos-highlight-fg-color)
      (set-face-background 'highlight           jos-highlight-bg-color)
      (set-face-foreground 'secondary-selection "black")
      (set-cursor-color                         jos-cursor-color)
      (set-mouse-color                          jos-mouse-color)
      )
  )

;; setup info search path
;;
(cond
 ((or (Emacs-version "GNU Emacs 21.3")
      (Emacs-version "XEmacs 21.5"))
  (defvar Info-default-directory-list 
    '("c:/progra~1/emacs-21.3/info"
      "c:/Program Files/XEmacs/xemacs-21.5/info"
      )) 
  (setq Info-directory-list 
	'("c:/progra~1/emacs-21.3/info"
	    "c:/Program Files/XEmacs/xemacs-21.5/info")))
 ) ;; cond - setup info path


;;
;; load up the jos functions and prefered key binds
;;
;;(load-library "josfuns") -- I've included them in this file

;; enable mini buffer
(put 'eval-expression 'disabled nil)

;; allow narrow to region
(put 'narrow-to-region 'disabled nil)

;;Turn on syntax highlighting everywhere
(global-font-lock-mode)

;;; self explanatory, set to your favorite width
(setq tab-width 2)

;;; Make sure that emacs doesn't put tabs in my files
(setq indent-tabs-mode nil)

;;; time in mode line
(display-time)



;; allow goal column setting

;; emacs desktop support
;;
(load "desktop")
;(desktop-load-default)
;(desktop-read)

;; setup editing modes
;;
;; we're just adding items 1 by 1, the old code no longer
;; suitable to versions from emacs 22
(add-to-list 'auto-mode-alist '("\\.scala\\'" . scala-mode))
(autoload 'scala-mode "scala-mode")
(add-to-list 'auto-mode-alist '("\\.mm\\'" . objc-mode))
(add-to-list 'auto-mode-alist '("\\.h\\'" . objc-mode))

;; javascript lib will not load on bare install older < 23 version of emacs
;(add-to-list 'auto-mode-alist '("\\.as\\'" . javascript-mode))
;(add-to-list 'auto-mode-alist '("\\.js\\'" . javascript-mode))
;(load-library "javascript")

;;; erlang support
(setq load-path
      (cons "/usr/local/lib/erlang//lib/tools-2.6.6.5/emacs" load-path))
(setq erlang-root-dir "/usr/local/lib/erlang")
(setq exec-path (cons "/usr/local/bin" exec-path)) 
;(require 'erlang-start)

;;; this old code is just for reference, does not execute
(if t
  (progn
    (add-to-list 'auto-mode-alist '("\\.xml\\'" . xml-mode))
    (autoload 'xml-mode "psgml" nil t)                         


    ;; in the setup file, more can be added later 
    (add-to-list 'auto-mode-alist '("\\.py\\'"  . python-mode))
    (add-to-list 'auto-mode-alist '("[^/]\\.dired$" . dired-virtual-mode))
    (add-to-list 'auto-mode-alist '("\\.xml\\'" . xml-mode))
    (add-to-list 'auto-mode-alist '("\\.css$"   . css-mode))

    ;; jos have not installed sgml verifier yet 
    (autoload 'css-mode "css-mode")
    (autoload 'xml-mode "psgml" nil t)                         
    (autoload 'python-mode "python-mode" nil t)
    (autoload 'php-mode "php-mode" "PHP editing mode" t)
    ))


;;
;; Setup preferred function keys
;;
(global-set-key [f2] 'other-window)
(global-set-key [f3] 'other-frame)
(global-set-key [f4] 'menu-bar-mode) 
(global-set-key [f5] 'font-lock-fontify-buffer)  ;;; hilit-rehighlight-buffer)

;;
;; for some reason ^Q has been hi-jacked so we'll set C-c C-i to quoted-insert
;;
(global-set-key "\C-c\C-i"    'quoted-insert)

;;
;; start a shell
;;
(global-set-key "\^x\^m"    'shell)

;;
;; nukes whitespace intelligently
;;
(global-set-key "\C-\M-m"     'fixup-whitespace)

;;
;; remap backspace to delete and help to c-x c-h
;;
(global-set-key "\^h"    'delete-backward-char)
(global-set-key "\^x\^h" 'help-for-help       )

;;Reassign for incremental search as well
(setq search-delete-char 8) ; 8 is back space

;;
;; write-region to C-x w, used to be command widen
;;
(global-set-key "\C-xw" 'write-region)

;;
;; Use electric-buffer-edit instead of list-buffers
;;
;;(global-set-key "\C-x\C-c\C-b" 'electric-buffer-list)
(global-set-key "\C-x\C-b" 'electric-buffer-list)

;; set up  goto-line with a key def
(global-set-key  "\^x\^g" 'goto-line)

;; remap zap-to-char from M-z to c-x c-z
(global-set-key  "\^x\^z" 'zap-to-char)

;;; set up  scroll window by one defs
;; these defs for basic emacs, bindings are epsilon equivelents
(defun scroll-one-up () 
  (interactive)
  (scroll-up 1))

(defun scroll-one-down () 
  (interactive)
  (scroll-down 1))

(global-set-key  "\^z" 'scroll-one-up)
(global-set-key  [M-z] 'scroll-one-down)


;; set up  compile key def, prompts for make cmd and directory
;;
;; jos, the handling of the directory name is absolutly primative and 
;; full of bugs, but it does seem to almost function. How about a fix
;; when we have time? 
(setq compile-command nil)
(defvar jos-make-directory "~/" "directory that jos make will change to before make cmd")
(defun jos-make (make-dir)
  (interactive (list (expand-file-name
		      (read-file-name "Make Directory: "   jos-make-directory "" jos-make-directory)
		      jos-make-directory)))
  (setq jos-make-directory make-dir)
  (if (or (not compile-command) (string-equal compile-command ""))
      (setq compile-command (read-string "Compile command: " compile-command)))
  (if (cd jos-make-directory)
      (compile compile-command)))

(global-set-key  "\^c\^k" 'jos-make)

;;
;; show matching paren function
;;
(global-set-key "%" 'match-paren)
  
(defun match-paren (arg)
  "Go to the matching parenthesis if on parenthesis otherwise insert %."
  (interactive "p")
  (cond ((looking-at "[([{]") (forward-sexp 1) (backward-char))
	((looking-at "[])}]") (forward-char) (backward-sexp 1))
	(t (self-insert-command (or arg 1)))))


;;
;; get rid of C-x C-c quit
;;

(defun no-exit ()
  (interactive)
  (beep)
  (if (yes-or-no-p "Really Exit Dude? ")
      (progn
	(desktop-save (getenv "HOME"))
	(save-buffers-kill-emacs))))

(global-set-key "\C-x\C-c" 'no-exit)

(setq c++-mode-hook 
      '(lambda nil 
	 (setq c-indent-level                0
	       c-continued-statement-offset  0
	       c-continued-brace-offset      0
	       c-brace-offset                2
	       c-brace-imaginary-offset      2
	       c-argdecl-indent              2
	       c-label-offset               -2
	       c++-empty-arglist-indent      2
	       c++-friend-offset             0
	       c++-comment-only-line-offset  0
	       c++-auto-newline              t
	       c++-hanging-braces-p        nil
	       c++-auto-hungry-initial-state 'auto-only
               c++-continued-member-initializations nil
	       )
	 (princ "Zuken C++ initialization completed.")))

;;
;;  cc-mode stuff
;;

(require 'cc-mode)
(c-set-offset 'substatement-open 0)
(c-set-offset 'statement-cont 0)
(setq c-tab-always-indent 42)
(setq c-basic-offset 4)

(defun cpl-java-mode-hook ()
  (cond (window-system
		 (turn-on-font-lock)
		 (setq c-basic-offset 4)
         (setq indent-tabs-mode nil)
         ;(setq c-auto-hungry-string t) ; backspace eats extra whitespace
         ;(setq c-auto-newline t) ; auto newline with curly braces

	 (c-set-offset 'substatement-open 0)
	 (c-set-offset 'statement-cont 0)
	 (c-set-offset 'arglist-intro '+)
	 (c-set-offset 'case-label '+)
	 (c-set-offset 'statement-case-open 0)
	 (setq c-hanging-braces-alist nil) ; always insert braces before and after everything

         (setq indent-tabs-mode nil) ; don't insert tabs
	 (untabify (point-min) (point-max)) ; convert tabs to spaces
	 (set-buffer-modified-p nil)
	 )))

(add-hook 'java-mode-hook 'cpl-java-mode-hook)

(defun insert-javadoc-class-comment ()
  "Insert a java class comment"
  (interactive)
  (if (search-forward "public class" nil t)
      (progn
	(beginning-of-line)
	(insert-string "/**\n")
	(insert-string " * ...\n")
	(insert-string " *\n")
	(insert-string " * @version\t$Revision: 1.4 $\n")
	(insert-string " * @author\t<a href=\"mailto:"
                   mail-default-reply-to
                   "\">" user-full-name "</a>")
	(insert-string mail-default-reply-to)
	(insert-string "\">")
	(insert-string user-full-name)
	(insert-string "</a>\n")
	(insert-string "**/\n")
	(search-backward "..." nil t)
      )
  )
)

(global-set-key "\C-cc" 'insert-javadoc-class-comment)

(defun insert-javadoc-comment()
  "Insert a javadoc-style comment stub."
  (interactive)
  (insert "    /**")
  (newline)
  (insert "     * ")
  (newline)
  (insert "    **/")
  (newline)
  (forward-line -2)
  (end-of-line)
)

(global-set-key "\C-cd" 'insert-javadoc-comment)

(defun toggle-fullscreen () 
  "toggles whether the currently selected frame consumes the 
   entire display or is decorated with a window border" 
  (interactive) 
  (let ((f (selected-frame))) 
    (modify-frame-parameters 
     f 
     `((fullscreen . ,(if (eq nil (frame-parameter f 'fullscreen)) 'fullboth nil))))))

(global-set-key "\C-c\C-b" 'set-buffer-file-coding-system)
;;(toggle-fullscreen)

;; toggle between camelcase and pythonic/cstyle symbols
;; from https://www.bunkus.org/blog/2009/12/switching-identifier-naming-style-between-camel-case-and-c-style-in-emacs/
(defun mo-toggle-identifier-naming-style ()
  "Toggles the symbol at point between C-style naming,
e.g. `hello_world_string', and camel case,
e.g. `HelloWorldString'."
  (interactive)
  ;;(let* ((symbol-pos (bounds-of-thing-at-point 'symbol))
  ;; 'symbol doesn't work because no symbols in a python prog
  (let* ((symbol-pos (bounds-of-thing-at-point 'word))
         case-fold-search symbol-at-point cstyle regexp func)
    (unless symbol-pos
      (error "No symbol at point"))
    (save-excursion
      (narrow-to-region (car symbol-pos) (cdr symbol-pos))
      ;;      (setq cstyle (string-match-p "_" (buffer-string))
      ;; using match which probably screws this up because no string-match-p in my emacs WTF? :(
      (setq cstyle (string-match "_" (buffer-string))
            regexp (if cstyle "\\(?:\\_<\\|_\\)\\(\\w\\)" "\\([A-Z]\\)")
            func (if cstyle
                     'capitalize
                   (lambda (s)
                     (concat (if (= (match-beginning 1)
                                    (car symbol-pos))
                                 ""
                               "_")
                             (downcase s)))))
      (goto-char (point-min))
      (while (re-search-forward regexp nil t)
        (replace-match (funcall func (match-string 1))
                       t nil))
      (widen))))

(global-set-key "\C-c\C-t" 'mo-toggle-identifier-naming-style)
